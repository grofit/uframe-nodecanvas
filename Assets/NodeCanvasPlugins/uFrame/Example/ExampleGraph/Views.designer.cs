// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.Kernel;
using uFrame.MVVM;
using uFrame.MVVM.Services;
using uFrame.MVVM.Bindings;
using uFrame.Serialization;
using UniRx;
using UnityEngine;


public class EntityViewBase : uFrame.MVVM.ViewBase {
    
    private System.IDisposable _PositionDisposable;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Name;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _Position;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Health;
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(EntityViewModel);
        }
    }
    
    public EntityViewModel Entity {
        get {
            return (EntityViewModel)ViewModelObject;
        }
    }
    
    public virtual void ResetPosition() {
        if (_PositionDisposable != null) {
            _PositionDisposable.Dispose();
        }
        _PositionDisposable = GetPositionObservable().Subscribe(Entity.PositionProperty).DisposeWith(this);
    }
    
    protected virtual Vector3 CalculatePosition() {
        return default(Vector3);
    }
    
    protected virtual UniRx.IObservable<Vector3> GetPositionObservable() {
        return this.UpdateAsObservable().Select(p=>CalculatePosition());
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as EntityViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var entityview = ((EntityViewModel)model);
        entityview.Name = this._Name;
        entityview.Position = this._Position;
        entityview.Health = this._Health;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Entity to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
        ResetPosition();
    }
}
