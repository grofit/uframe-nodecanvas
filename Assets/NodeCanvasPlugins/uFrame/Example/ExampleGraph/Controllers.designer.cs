// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;
using uFrame.Kernel;
using uFrame.IOC;
using uFrame.MVVM;
using UnityEngine;
using uFrame.Serialization;


public class EntityControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _EntityViewModelManager;
    
    [uFrame.IOC.InjectAttribute("Entity")]
    public uFrame.MVVM.IViewModelManager EntityViewModelManager {
        get {
            return _EntityViewModelManager;
        }
        set {
            _EntityViewModelManager = value;
        }
    }
    
    public IEnumerable<EntityViewModel> EntityViewModels {
        get {
            return EntityViewModelManager.OfType<EntityViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeEntity(((EntityViewModel)(viewModel)));
    }
    
    public virtual EntityViewModel CreateEntity() {
        return ((EntityViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new EntityViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeEntity(EntityViewModel viewModel) {
        // This is called when a EntityViewModel is created
        EntityViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        EntityViewModelManager.Remove(viewModel);
    }
}
